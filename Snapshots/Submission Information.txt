## Inspiration
We initially aimed to develop a mobile app or device that could improve the quality of life and accessibility of daily services, which led us to research issues experienced by vulnerable populations and minority groups in the healthcare and health insurance sectors. This led us to the startling realization (upon conducting further research) that medical bill transparency is a major issue across the United States that disproportionately affects groups who have limited access or resources to self-advocate or negotiate their hospital bills. 
## What it does
billBoard increases transparency in medical costs by aggregating data on the details of the top 20 most common medical procedures and their pricing from around the country. Our website contains two main features in order to fulfill this purpose. 
Firstly, users can upload how much a medical procedure cost them, as well as many other supplemental details about their experience (including their gender, the date/time when the procedure occurred, location, etc) in order to create a holistic, thorough searchable database. 

This database will in turn be used by any user to determine whether they are being overcharged or discriminated against. Users are able to search by procedure and refine their results by address to view the median cost of the procedure and specific data points on what other users had paid, which will also be ranked by physical proximity to their input location. 

Greater transparency and preparedness regarding the median, fair, and local costs of common medical procedures will engage, educate, and empower users to take control and assert their rights as patients against the often unexpectedly heavy burdens of medical debt and ensure that they receive the fairest rates possible. 
## How we built it
We used a Bootstrap template with customized HTML/CSS for the UI and developed our UX and branding in Figma, Google Fonts API, and Coolors.co. We also used JavaScript, Express.js, Node.js, Python, and an SQL (SQLite) database back end. 

The user inputs information about their medical procedure experience (their "bill") into the "Post a bill" page. This is then inserted into a server-side relational database using the HTML Post Request API. Then, the user can search the data where the SQLite table is queried in order to receive entries that match the search to then be displayed by the front end. In order to test functionality, a Python script was used to automatically generate thousands of random but still research-based and realistic user entries from around the country.
## Challenges we ran into
Because we did not have much experience with JavaScript, we initially tried to have PyScript (Python in HTML) be the interface between the input form and the database because we were more comfortable with Python. PyScript was not a good tool to use for this as it would necessitate the entire database to be on the client side. Thus, this system was flawed in that there was no real front end and back end, so it could not be used as a web app. 

With only 10 hours left till the submission deadline and our back-end yet to be assembled, we were guided by one of the mentors to abandon the PyScript route and instead consider using Node.js and Express.js. We then taught ourselves Node.js and Express.js and completely rebuilt our backend in this unfamiliar language, and reconfigured our front end to seamlessly connect to the SQL database and user datasets. 
## Accomplishments that we're proud of
We are really proud of how flexible we were when our initial plans did not work out. Even though we had spent so much time and energy essentially banking on PyScript, we were still able to pivot quickly and take the development in a completely different and technically new direction with very little time left. We are also proud of how we adapted and strategized collaboratively as we went, and how well we worked together as it allowed us to each leverage our unique skills and abilities to cooperatively make a significant and fulfilling final product.
## What we learned
We learned that whatever seems the easiest probably has some pitfalls and to properly research what we are trying to do before committing to something. We used PyScript simply because we did not have a lot of JavaScript experience, even though that is what is used in most websites like this. We should have properly looked into the functionality of PyScript rather than just using it because we knew python. We also learned a lot of JavaScript in the last 10 hours and how to set a proper back end and front end for a website.
## What's next for billBoard
We want to increase the functionality by adding fields for more data to be entered as well as more statistics about the data. We also want to host our website on a domain for wider use by the general community and organizational partners. More statistics than just the median will paint a better picture of the data. More data will allow us to also add more visualizations to the data like a map. We also want to be able to support any procedure and we want to properly implement the breakdown feature where you can enter the full cost breakdown of each component procedure. We would also like to implement a bill scanner using computer vision, so users don't have to manually enter all of the information.